generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @unique @default(cuid())
  email             String              @unique
  password          String
  firstName         String
  lastName          String
  isPhoneVerified   Boolean             @default(false)
  isBlocked         Boolean             @default(false)
  profile           String?
  phoneNumber       String?
  gender            String?
  dateOfBirth       DateTime?
  role              USER_ROLE?          @default(UNKNOWN)
  // Relations
  Teacher           Teacher[]
  Student           Student[]
  Parent            Parent[]
  Director          Director[]
  messagesSent      Message[]           @relation(name: "SentMessages")
  messagesReceived  Message[]           @relation(name: "ReceivedMessages")
  SectionMessage    SectionMessage[]
  GradeLevelMessage GradeLevelMessage[]
  notifications     Notification[]
}

model Teacher {
  id                    String                  @id @unique @default(cuid())
  isActivated           Boolean                 @default(false)
  user                  User?                   @relation(fields: [userId], references: [id])
  userId                String?
  Section               Section[]
  TeacherSectionSubject TeacherSectionSubject[]
  Result                Result[]
}

model Student {
  id        String   @id @unique @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  section   Section? @relation(fields: [sectionId], references: [id])
  userId    String?
  sectionId String?

  parent   Parent @relation(fields: [parentId], references: [id])
  parentId String // Required foreign key

  TeacherSectionSubject TeacherSectionSubject[]
  Result                Result[]
  CollectiveResult      CollectiveResult[]
  Attendance            Attendance[]
}

model Parent {
  id          String    @id @unique @default(cuid())
  isActivated Boolean   @default(false)
  isSMSUser   Boolean   @default(false)
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  students    Student[] // One-to-many relation to students
}

model Director {
  id           String         @id @unique @default(cuid())
  user         User?          @relation(fields: [userId], references: [id])
  userId       String?
  Announcement Announcement[]
  Calendar     Calendar[] // ðŸ‘ˆ reverse relation
}

model Subject {
  id                    String                  @id @unique @default(cuid())
  name                  String?
  GradeLevel            GradeLevel?             @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId          String?
  Result                Result[]
  TeacherSectionSubject TeacherSectionSubject[]
}

model GradeLevel {
  id                String              @id @unique @default(cuid())
  level             String?
  subjectList       Subject[]
  Section           Section[]
  GradeLevelMessage GradeLevelMessage[]
}

model Section {
  id                    String                  @id @unique @default(cuid())
  gradeLevel            GradeLevel?             @relation(fields: [gradeLevelId], references: [id])
  teacherSectionSubject TeacherSectionSubject[]
  name                  String?
  homeRoom              Teacher                 @relation(fields: [teacherId], references: [id])
  students              Student[]
  gradeLevelId          String?
  teacherId             String                  @unique
  Result                Result[]
  Roaster               Roaster[]
  CollectiveResult      CollectiveResult[]
  Attendance            Attendance[]
  SectionMessage        SectionMessage[]
}

model TeacherSectionSubject {
  id        String   @id @unique @default(cuid())
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  subject   Subject? @relation(fields: [subjectId], references: [id])
  section   Section? @relation(fields: [sectionId], references: [id])
  teacherId String?
  subjectId String?
  sectionId String?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
}

model Result {
  id                 String            @id @unique @default(cuid())
  test1              Float?
  test2              Float?
  mid                Float?
  final              Float?
  assignment         Float?
  quiz               Float?
  teacher            Teacher?          @relation(fields: [teacherId], references: [id])
  student            Student?          @relation(fields: [studentId], references: [id])
  section            Section?          @relation(fields: [sectionId], references: [id])
  subject            Subject?          @relation(fields: [subjectId], references: [id])
  teacherId          String?
  studentId          String?
  sectionId          String?
  subjectId          String?
  CollectiveResult   CollectiveResult? @relation(fields: [collectiveResultId], references: [id])
  collectiveResultId String?

  @@unique([studentId, subjectId])
}

model Roaster {
  id               String             @id @unique @default(cuid())
  section          Section?           @relation(fields: [sectionId], references: [id])
  collectiveResult CollectiveResult[]
  sectionId        String?            @unique()
}

model CollectiveResult {
  id          String   @id @unique @default(cuid())
  student     Student? @relation(fields: [studentId], references: [id])
  result      Result[]
  section     Section? @relation(fields: [sectionId], references: [id])
  conduct     Conduct?
  rank        Int?
  feedback    String?
  
  Roaster     Roaster? @relation(fields: [roasterId], references: [id])
  roasterId   String?
  studentId   String?  @unique()
  sectionId   String?
  isAvailable Boolean  @default(false)
  totalScore  Float?   @default(0.0)
  average     Float?   @default(0.0)
}

model Calendar {
  id          String    @id @unique @default(cuid())
  title       String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdBy   Director? @relation(fields: [directorId], references: [id])
  directorId  String?
}

model Attendance {
  id        String    @id @unique @default(cuid())
  student   Student?  @relation(fields: [studentId], references: [id])
  section   Section?  @relation(fields: [sectionId], references: [id])
  date      DateTime?
  status    status    @default(PRESENT)
  studentId String?
  sectionId String?

  @@unique([studentId, date])
}

model Announcement {
  id          String    @id @unique @default(cuid())
  topic       String?
  description String?
  image       String?
  createdBy   Director? @relation(fields: [directorId], references: [id])
  directorId  String?
}

model Message {
  id         String   @id @unique @default(cuid())
  content    String?
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  seen       Boolean  @default(false)
  images     String[] @default([])
  sender     User     @relation(name: "SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
}

model SectionMessage {
  id        String    @id @unique @default(cuid())
  content   String?
  createdAt DateTime?
  section   Section?  @relation(fields: [sectionId], references: [id])
  sender    User?     @relation(fields: [senderId], references: [id])
  images    String[]  @default([])
  sectionId String?
  senderId  String?
}

model GradeLevelMessage {
  id           String      @id @unique @default(cuid())
  content      String?
  image        String?
  createdAt    DateTime?
  gradeLevel   GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId String?
  sender       User?       @relation(fields: [senderId], references: [id])
  senderId     String?
}

model Notification {
  id        String   @id @unique @default(cuid())
  topic     String
  message   String
  link      String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum Conduct {
  A
  B
  C
  D
}

enum status {
  PRESENT
  ABSENT
  EXECUSED
}

enum USER_ROLE {
  UNKNOWN
  DIRECTOR
  PARENT
  TEACHER
  STUDENT
}
