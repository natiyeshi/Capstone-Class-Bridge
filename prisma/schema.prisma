generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @unique @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  isPhoneVerified Boolean   @default(false)
  isBlocked       Boolean   @default(false)
  profile         String?
  phoneNumber     String?
  gender          String?
  dateOfBirth     DateTime?
  curseNumber     Int       @default(0)

  role              USER_ROLE?          @default(UNKNOWN)
  Director          Director[]
  GradeLevelMessage GradeLevelMessage[]
  messagesReceived  Message[]           @relation("ReceivedMessages")
  messagesSent      Message[]           @relation("SentMessages")
  notifications     Notification[]
  Parent            Parent[]
  SectionMessage    SectionMessage[]
  Student           Student[]
  Teacher           Teacher[]
}

model Teacher {
  id                    String                  @id @unique @default(cuid())
  isActivated           Boolean                 @default(false)
  userId                String?
  Result                Result[]
  Section               Section?
  user                  User?                   @relation(fields: [userId], references: [id])
  TeacherSectionSubject TeacherSectionSubject[]
}

model Student {
  id                    String                  @id @unique @default(cuid())
  userId                String?
  sectionId             String?
  parentId              String
  Attendance            Attendance[]
  CollectiveResult      CollectiveResult?
  Result                Result[]
  parent                Parent                  @relation(fields: [parentId], references: [id])
  section               Section?                @relation(fields: [sectionId], references: [id])
  user                  User?                   @relation(fields: [userId], references: [id])
  TeacherSectionSubject TeacherSectionSubject[]
  Roaster               Roaster[]
}

model Parent {
  id          String    @id @unique @default(cuid())
  isActivated Boolean   @default(false)
  isSMSUser   Boolean   @default(false)
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  students    Student[]
}

model Director {
  id           String         @id @unique @default(cuid())
  userId       String?
  Announcement Announcement[]
  Calendar     Calendar[]
  user         User?          @relation(fields: [userId], references: [id])
}

model Subject {
  id                    String                  @id @unique @default(cuid())
  name                  String?
  gradeLevelId          String?
  Result                Result[]
  GradeLevel            GradeLevel?             @relation(fields: [gradeLevelId], references: [id])
  TeacherSectionSubject TeacherSectionSubject[]
}

model GradeLevel {
  id                String              @id @unique @default(cuid())
  level             String?
  GradeLevelMessage GradeLevelMessage[]
  Section           Section[]
  subjectList       Subject[]
}

model Section {
  id                    String                  @id @unique @default(cuid())
  name                  String?
  gradeLevelId          String?
  teacherId             String                  @unique
  Attendance            Attendance[]
  CollectiveResult      CollectiveResult[]
  Result                Result[]
  roasters              Roaster[]
  gradeLevel            GradeLevel?             @relation(fields: [gradeLevelId], references: [id])
  homeRoom              Teacher                 @relation(fields: [teacherId], references: [id])
  SectionMessage        SectionMessage[]
  students              Student[]
  teacherSectionSubject TeacherSectionSubject[]
}

model TeacherSectionSubject {
  id        String   @id @unique @default(cuid())
  teacherId String?
  subjectId String?
  sectionId String?
  studentId String?
  section   Section? @relation(fields: [sectionId], references: [id])
  Student   Student? @relation(fields: [studentId], references: [id])
  subject   Subject? @relation(fields: [subjectId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model Result {
  id                 String            @id @unique @default(cuid())
  test1              Float?
  test2              Float?
  mid                Float?
  final              Float?
  assignment         Float?
  quiz               Float?
  teacherId          String?
  studentId          String?
  sectionId          String?
  subjectId          String?
  collectiveResultId String?
  CollectiveResult   CollectiveResult? @relation(fields: [collectiveResultId], references: [id])
  section            Section?          @relation(fields: [sectionId], references: [id])
  student            Student?          @relation(fields: [studentId], references: [id])
  subject            Subject?          @relation(fields: [subjectId], references: [id])
  teacher            Teacher?          @relation(fields: [teacherId], references: [id])

  @@unique([studentId, subjectId])
}

model CollectiveResult {
  id          String   @id @unique @default(cuid())
  conduct     Conduct?
  rank        Int?
  feedback    String?
  roasterId   String?
  studentId   String?  @unique
  sectionId   String?
  isAvailable Boolean  @default(false)
  totalScore  Float?   @default(0.0)
  average     Float?   @default(0.0)
  section     Section? @relation(fields: [sectionId], references: [id])
  student     Student? @relation(fields: [studentId], references: [id])
  result      Result[]
}

model Roaster {
  id             String           @id @unique @default(cuid())
  section        Section          @relation(fields: [sectionId], references: [id])
  student        Student          @relation(fields: [studentId], references: [id])
  studentId      String
  sectionId      String
  average        Float
  rank           Int
  semesterNumber Int
  subjects       RoasterSubject[] // New relation to RoasterSubject

  @@unique([sectionId, studentId, semesterNumber])
}

model settings {
  id             String @id @unique @default(cuid())
  semesterNumber Int
}

model RoasterSubject {
  id            String  @id @unique @default(cuid())
  roaster       Roaster @relation(fields: [roasterId], references: [id])
  roasterId     String
  subjectName   String
  subjectResult Float

  @@unique([roasterId, subjectName])
}

model Calendar {
  id          String    @id @unique @default(cuid())
  title       String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  directorId  String?
  createdBy   Director? @relation(fields: [directorId], references: [id])
}

model Attendance {
  id        String    @id @unique @default(cuid())
  date      DateTime?
  status    status    @default(PRESENT)
  studentId String?
  sectionId String?
  section   Section?  @relation(fields: [sectionId], references: [id])
  student   Student?  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
}

model Announcement {
  id          String    @id @unique @default(cuid())
  topic       String?
  description String?
  image       String?
  directorId  String?
  createdBy   Director? @relation(fields: [directorId], references: [id])
}

model Message {
  id         String   @id @unique @default(cuid())
  content    String?
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  seen       Boolean  @default(false)
  images     String[] @default([])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model SectionMessage {
  id        String    @id @unique @default(cuid())
  content   String?
  createdAt DateTime?
  images    String[]  @default([])
  sectionId String?
  senderId  String?
  section   Section?  @relation(fields: [sectionId], references: [id])
  sender    User?     @relation(fields: [senderId], references: [id])
}

model GradeLevelMessage {
  id           String      @id @unique @default(cuid())
  content      String?
  image        String?
  createdAt    DateTime?
  gradeLevelId String?
  senderId     String?
  gradeLevel   GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  sender       User?       @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @unique @default(cuid())
  topic     String
  message   String
  seen      Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum Conduct {
  A
  B
  C
  D
}

enum status {
  PRESENT
  ABSENT
  EXECUSED
}

enum USER_ROLE {
  UNKNOWN
  DIRECTOR
  PARENT
  TEACHER
  STUDENT
}
