generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  role     Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student Student[]
  Parent Parent[]
  Teacher Teacher[]
  Director Director[]
}

enum Role {
  DIRECTOR
  TEACHER
  PARENT
  STUDENT
}

model Student {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
  sectionId String?
  section   Section? @relation(fields: [sectionId], references: [id])
  performance Performance?
  attendance Attendance[]
  roster    Roster?
}

model Parent {
  id      String   @id @default(uuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id])
  students Student[]
}

model Teacher {
  id      String   @id @default(uuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id])
  subjects Subject[]
  sections Section[]
  attendance Attendance[]

  Roster Roster[]
}

model Director {
  id      String   @id @default(uuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id])
  announcements Announcement[]
  calendarEvents Calendar[]
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  // sender      User     @relation("Sender", fields: [senderId], references: [id])
  // receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
  content     String
  createdAt   DateTime @default(now())
}

model Performance {
  id        String   @id @default(uuid())
  studentId String   @unique
  student   Student  @relation(fields: [studentId], references: [id])
  grade     Float
  createdAt DateTime @default(now())
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model Section {
  id          String   @id @default(uuid())
  name        String
  gradeLevelId String
  gradeLevel  GradeLevel @relation(fields: [gradeLevelId], references: [id])
  students    Student[]
  teachers    Teacher[]
}

model GradeLevel {
  id        String   @id @default(uuid())
  level     String
  sections  Section[]
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  date      DateTime
  status    String
}

model Announcement {
  id        String   @id @default(uuid())
  directorId String
  director  Director @relation(fields: [directorId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model Calendar {
  id          String   @id @default(uuid())
  directorId  String
  director    Director @relation(fields: [directorId], references: [id])
  eventTitle  String
  eventDate   DateTime
}

model Roster {
  id        String   @id @default(uuid())
  studentId String @unique
  student   Student @relation(fields: [studentId], references: [id])
  markedBy  String
  teacher   Teacher @relation(fields: [markedBy], references: [id])
}
